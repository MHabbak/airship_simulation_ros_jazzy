<?xml version="1.0" ?>
<robot xmlns:xacro="http://ros.org/wiki/xacro">
  
  <!-- Wind Plugin - Using your migrated normwind_plugin -->
  <xacro:if value="$(arg enable_wind)">
    <gazebo>
      <!-- FIXED: Correct plugin name to match registration -->
      <plugin filename="normwind_plugin" name="normwind_plugin::NormWindPlugin">
        <robotNamespace>${namespace}</robotNamespace>
        <linkName>blimp_body_link</linkName>
        <frameId>world</frameId>
        <windDirectionMean>1 1 0</windDirectionMean>
        <windSpeedMean>1.5</windSpeedMean>
        <windTurbulenceLevel>3</windTurbulenceLevel>
        <useCustomStaticWindField>false</useCustomStaticWindField>
        <customWindFieldPath>~/blimp_simulator/blimp_description/worlds/wind_field.txt</customWindFieldPath>
        <windForcePubTopic>wind_force</windForcePubTopic>
        <windSpeedPubTopic>wind_speed</windSpeedPubTopic>
      </plugin>
    </gazebo>
  </xacro:if>

  <!-- Aerodynamic Forces - Using your migrated finliftdrag_plugin -->
  <xacro:if value="$(arg enable_physics)">
    
    <!-- Main body aerodynamics -->
    <gazebo>
      <!-- FIXED: Correct plugin name to match registration -->
      <plugin name="finliftdrag_plugin::FinLiftDragPlugin" filename="finliftdrag_plugin">
        <robotNamespace>${namespace}</robotNamespace> 
        <link_name>blimp_body_link</link_name>
        <rho>1.2041</rho>
        <cla>1.2</cla>
        <cda>0.04</cda>
        <cma>0.01</cma>
        <alpha_stall>0.3839</alpha_stall>
        <cla_stall>0.0</cla_stall>
        <cda_stall>1.0</cda_stall>
        <cma_stall>0.0</cma_stall>
        <alpha_0>0</alpha_0>
        <area>2.5</area>
        <radial_symmetry>true</radial_symmetry>
        <upward>0 1 0</upward>
        <forward>1 0 0</forward>
        <cp>0 0 0</cp>
        <windSpeedSubTopic>wind_speed</windSpeedSubTopic>
      </plugin>
    </gazebo>

    <!-- Bottom rudder aerodynamics -->
    <gazebo>
      <!-- FIXED: Correct plugin name to match registration -->
      <plugin name="finliftdrag_plugin::FinLiftDragPlugin" filename="finliftdrag_plugin">
        <robotNamespace>${namespace}</robotNamespace> 
        <link_name>bot_rud_part1_link</link_name>
        <control_joint_name>bot_rud_part1_bot_rud_joint_link_joint</control_joint_name>
        <rho>1.2041</rho>
        <cla>0.6</cla>
        <cda>1.2</cda>
        <cma>0.01</cma>
        <alpha_stall>0.3839</alpha_stall>
        <cla_stall>0.0</cla_stall>
        <cda_stall>1.2</cda_stall>
        <cma_stall>0.0</cma_stall>
        <alpha_0>0</alpha_0>
        <area>0.5</area>
        <radial_symmetry>false</radial_symmetry>
        <upward>0 -1 0</upward>
        <forward>1 0 0</forward>
        <cp>0 0 0</cp>
        <control_joint_rad_to_cl>4.0</control_joint_rad_to_cl>
        <windSpeedSubTopic>wind_speed</windSpeedSubTopic>
      </plugin>
    </gazebo>

    <!-- Top rudder aerodynamics -->
    <gazebo>
      <!-- FIXED: Correct plugin name to match registration -->
      <plugin name="finliftdrag_plugin::FinLiftDragPlugin" filename="finliftdrag_plugin">
        <robotNamespace>${namespace}</robotNamespace> 
        <link_name>top_rud_part1_link</link_name>
        <control_joint_name>top_rud_part1_top_rud_joint_link_joint</control_joint_name>
        <rho>1.2041</rho>
        <cla>0.6</cla>
        <cda>1.2</cda>
        <cma>0.01</cma>
        <alpha_stall>0.3839</alpha_stall>
        <area>0.5</area>
        <radial_symmetry>false</radial_symmetry>
        <upward>0 1 0</upward>
        <forward>1 0 0</forward>
        <cp>0 0 0</cp>
        <control_joint_rad_to_cl>4.0</control_joint_rad_to_cl>
        <windSpeedSubTopic>wind_speed</windSpeedSubTopic>
      </plugin>
    </gazebo>

        <!-- Left Elevator Aerodynamics -->
    <gazebo>
      <!-- FIXED: Correct plugin name to match registration -->
      <plugin name="finliftdrag_plugin::FinLiftDragPlugin" filename="finliftdrag_plugin">
        <robotNamespace>${namespace}</robotNamespace>
        <link_name>left_elv_part1_link</link_name>
        <control_joint_name>left_elv_part1_left_elv_joint_link_joint</control_joint_name>
        <rho>1.2041</rho>
        <cla>0.6</cla>
        <cda>1.2</cda>
        <cma>0.01</cma>
        <alpha_stall>0.3839</alpha_stall>
        <cla_stall>0.0</cla_stall>
        <cda_stall>1.2</cda_stall>
        <cma_stall>0.0</cma_stall>
        <alpha_0>0</alpha_0>
        <area>0.5</area>
        <radial_symmetry>false</radial_symmetry>
        <upward>0 0 1</upward>
        <forward>1 0 0</forward>
        <cp>0 0 0</cp>
        <control_joint_rad_to_cl>4.0</control_joint_rad_to_cl>
        <windSpeedSubTopic>wind_speed</windSpeedSubTopic>
      </plugin>
    </gazebo>

    <!-- Right Elevator Aerodynamics -->
    <gazebo>
      <!-- FIXED: Correct plugin name to match registration -->
      <plugin name="finliftdrag_plugin::FinLiftDragPlugin" filename="finliftdrag_plugin">
        <robotNamespace>${namespace}</robotNamespace>
        <link_name>right_elv_part1_link</link_name>
        <control_joint_name>right_elv_part1_right_elv_joint_link_joint</control_joint_name>
        <rho>1.2041</rho>
        <cla>0.6</cla>
        <cda>1.2</cda>
        <cma>0.01</cma>
        <alpha_stall>0.3839</alpha_stall>
        <cla_stall>0.0</cla_stall>
        <cda_stall>1.2</cda_stall>
        <cma_stall>0.0</cma_stall>
        <alpha_0>0</alpha_0>
        <area>0.5</area>
        <radial_symmetry>false</radial_symmetry>
        <upward>0 0 -1</upward>
        <forward>1 0 0</forward>
        <cp>0 0 0</cp>
        <control_joint_rad_to_cl>4.0</control_joint_rad_to_cl>
        <windSpeedSubTopic>wind_speed</windSpeedSubTopic>
      </plugin>
    </gazebo>
  </xacro:if>

  <!-- Buoyancy Plugin - Using your migrated dynamicvolume_plugin -->
  <xacro:if value="$(arg enable_custom_plugins)">
    <gazebo>
      <!-- FIXED: Correct plugin name to match registration -->
      <plugin name="dynamicvolume_plugin::DynamicVolumePlugin" filename="dynamicvolume_plugin">
        <robotNamespace>${namespace}</robotNamespace> 
        <linkName>blimp_body_link</linkName> 
        <dynamicVolumeTopic>dynamic_volume</dynamicVolumeTopic> 
        <heliumMassTopic>helium_mass</heliumMassTopic> 
        <heliumMassKG>1.723</heliumMassKG> 
        <refAlt>341.0</refAlt>
        <fluidDensity>1.2041</fluidDensity>
        <frameId>world</frameId>
        <!-- Link volume properties -->
        <link name="blimp_body_link">
          <volume>10.472</volume>
          <center_of_volume>0 0 0</center_of_volume>
        </link>
      </plugin>
    </gazebo>
  </xacro:if>

  <!-- MOTOR PLUGINS - FIXED: Conditional inclusion -->
  <xacro:if value="$(arg enable_physics)">
    <!-- Right blade motor -->
    <gazebo>
      <!-- CORRECTED: Motor plugins using native Actuators interface -->

      <!-- Motor 0: Left Blade -->
      <plugin filename="gz-sim-multicopter-motor-model-system" 
              name="gz::sim::systems::MulticopterMotorModel">
        <robotNamespace>${namespace}</robotNamespace>
        <jointName>stick_left_blade_joint</jointName>
        <linkName>left_blade_link</linkName>
        <actuator_number>0</actuator_number>
        <turningDirection>ccw</turningDirection>
        <commandSubTopic>command/motor_speed</commandSubTopic>
        <motorSpeedPubTopic>motor_speed/0</motorSpeedPubTopic>
        <motorConstant>${motor_constant}</motorConstant>         <!-- Keep original physics -->
        <momentConstant>0.016</momentConstant>             
        <timeConstantUp>${time_constant_up}</timeConstantUp>
        <timeConstantDown>${time_constant_down}</timeConstantDown>
        <maxRotVelocity>838</maxRotVelocity>               <!-- Plugin will scale to this -->
        <motorType>velocity</motorType>
      </plugin>

      <!-- Motor 1: Right Blade -->  
      <plugin filename="gz-sim-multicopter-motor-model-system" 
              name="gz::sim::systems::MulticopterMotorModel">
        <robotNamespace>${namespace}</robotNamespace>
        <jointName>stick_right_blade_joint</jointName>
        <linkName>right_blade_link</linkName>
        <actuator_number>1</actuator_number>
        <turningDirection>cw</turningDirection>
        <commandSubTopic>command/motor_speed</commandSubTopic>
        <motorSpeedPubTopic>motor_speed/1</motorSpeedPubTopic>
        <motorConstant>${motor_constant}</motorConstant>         
        <momentConstant>0.016</momentConstant>             
        <timeConstantUp>${time_constant_up}</timeConstantUp>
        <timeConstantDown>${time_constant_down}</timeConstantDown>
        <maxRotVelocity>838</maxRotVelocity>
        <motorType>velocity</motorType>
      </plugin>

      <!-- Motor 2: Bottom Rudder -->
      <plugin filename="gz-sim-multicopter-motor-model-system" 
              name="gz::sim::systems::MulticopterMotorModel">
        <robotNamespace>${namespace}</robotNamespace>
        <jointName>bot_rud_part1_bot_rud_motor_joint</jointName>
        <linkName>bot_rud_motor_link</linkName>
        <actuator_number>2</actuator_number>
        <turningDirection>cw</turningDirection>
        <commandSubTopic>command/motor_speed</commandSubTopic>
        <motorSpeedPubTopic>motor_speed/2</motorSpeedPubTopic>
        <motorConstant>${motor_constant}</motorConstant>         
        <momentConstant>0.016</momentConstant>             
        <timeConstantUp>${time_constant_up}</timeConstantUp>
        <timeConstantDown>${time_constant_down}</timeConstantDown>
        <maxRotVelocity>838</maxRotVelocity>
        <motorType>velocity</motorType>
      </plugin>
    </gazebo>
  </xacro:if>

  <!-- Ground Truth Odometry -->
  <xacro:if value="$(arg enable_ground_truth)">
    <gazebo>
      <!-- FIXED: Correct Gazebo Harmonic built-in plugin filename -->
      <plugin filename="gz-sim-odometry-publisher-system" 
              name="gz::sim::systems::OdometryPublisher">
        <ros>
          <namespace>${namespace}</namespace>
          <remapping>~/out:=odometry</remapping>
        </ros>
        <odom_frame>odom</odom_frame>
        <robot_base_frame>blimp_body_link</robot_base_frame>
        <odom_publish_frequency>50</odom_publish_frequency>
      </plugin>
    </gazebo>
  </xacro:if>

  <!-- Tilt Joint Controller -->
  <xacro:if value="$(arg enable_physics)">
    <gazebo>
      <plugin filename="gz-sim-joint-position-controller-system" 
              name="gz::sim::systems::JointPositionController">
        <joint_name>base_stick_joint</joint_name>
        <sub_topic>servo_4_scaled</sub_topic>  <!-- Scaling as PX4 gives +- 45 degrees -->
        <p_gain>100</p_gain>
      </plugin>
    </gazebo>  
      <!-- Control Surface Joint Position Controllers -->
      <!-- Left Elevator -->
    <gazebo>
      <plugin filename="gz-sim-joint-position-controller-system"
              name="gz::sim::systems::JointPositionController">
        <joint_name>left_elv_part1_left_elv_joint_link_joint</joint_name>
        <sub_topic>servo_0_scaled</sub_topic>
        <p_gain>60</p_gain>
      </plugin>
    </gazebo>

      <!-- Right Elevator -->  
    <gazebo>
      <plugin filename="gz-sim-joint-position-controller-system"
              name="gz::sim::systems::JointPositionController">
        <joint_name>right_elv_part1_right_elv_joint_link_joint</joint_name>
        <sub_topic>servo_1_scaled</sub_topic>
        <p_gain>60</p_gain>
      </plugin>
    </gazebo>

      <!-- Top Rudder -->
    <gazebo>
      <plugin filename="gz-sim-joint-position-controller-system"
              name="gz::sim::systems::JointPositionController">
        <joint_name>top_rud_part1_top_rud_joint_link_joint</joint_name>
        <sub_topic>servo_2_scaled</sub_topic>
        <p_gain>60</p_gain>
      </plugin>
    </gazebo>

      <!-- Bottom Rudder -->
    <gazebo>
      <plugin filename="gz-sim-joint-position-controller-system"
              name="gz::sim::systems::JointPositionController">
        <joint_name>bot_rud_part1_bot_rud_joint_link_joint</joint_name>
        <sub_topic>servo_3_scaled</sub_topic>
        <p_gain>60</p_gain>
      </plugin>
    </gazebo>
  </xacro:if>

  <!-- PX4 Integration - REMOVED broken plugin, using native GZ bridge instead -->
  <!-- PX4 automatically connects to sensors when PX4_GZ_MODEL_NAME environment variable is set -->
  <!-- This eliminates the need for the problematic gz-sim-multicopter-velocity-control-system plugin -->
  <xacro:if value="$(arg enable_mavlink_interface)">
    <!-- PX4 native integration enabled via environment variables in launch file -->
    <!-- No additional plugins needed - PX4 gz_bridge handles sensor integration automatically -->
  </xacro:if>

</robot>